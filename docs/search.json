[{"path":"https://receptiviti.github.io/receptiviti-r/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Receptiviti Inc.. Funder, copyright holder. Kent English. Maintainer. Micah Iserman. Author, contractor.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Receptiviti Inc. (2022). receptiviti: Text Analysis Receptiviti API. url: receptiviti.github.io/receptiviti-r","code":"@Manual{,   title = {receptiviti: Text Analysis Through the Receptiviti API},   author = {{Receptiviti Inc.}},   year = {2022},   url = {https://receptiviti.github.io/receptiviti-r/}, }"},{"path":"https://receptiviti.github.io/receptiviti-r/index.html","id":"receptiviti","dir":"","previous_headings":"","what":"Text Analysis Through the Receptiviti API","title":"Text Analysis Through the Receptiviti API","text":"R package process text Receptiviti API.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Text Analysis Through the Receptiviti API","text":"Download R r-project.org, install package R console: load package:","code":"# install.packages('remotes') remotes::install_github('receptiviti/receptiviti-r') library(receptiviti)"},{"path":"https://receptiviti.github.io/receptiviti-r/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Text Analysis Through the Receptiviti API","text":"Makes requests Receptiviti API, working around size rate limitations. Avoids sending invalid identical texts, repeating requests session. Builds local database returned results avoid making repeat requests longer-term.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Text Analysis Through the Receptiviti API","text":"","code":"# score a single text single <- receptiviti(\"a text to score\")  # score multiple texts, and write results to a file multi <- receptiviti(c(\"first text to score\", \"second text\"), \"filename.csv\")  # score texts in separate files ## defaults to look for .txt files file_results <- receptiviti(\"./path/to/txt_folder\")  ## could be .csv file_results <- receptiviti(   \"./path/to/csv_folder\",   text_column = \"text\", file_type = \"csv\" )  # score texts in a single file results <- receptiviti(\"./path/to/file.csv\", text_column = \"text\")"},{"path":"https://receptiviti.github.io/receptiviti-r/index.html","id":"api-access","dir":"","previous_headings":"","what":"API Access","title":"Text Analysis Through the Receptiviti API","text":"access API, need load key secret, found dashboard. can enter arguments function call, default looked environment variables: can store R environment file permanently: set temporarily:","code":"RECEPTIVITI_KEY=\"32lettersandnumbers\" RECEPTIVITI_SECRET=\"56LettersAndNumbers\" # opens ~/.Renviron; after editing, save and restart R usethis::edit_r_environ() Sys.setenv(   RECEPTIVITI_KEY = \"32lettersandnumbers\",   RECEPTIVITI_SECRET = \"56LettersAndNumbers\" )"},{"path":"https://receptiviti.github.io/receptiviti-r/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Receptiviti Inc. Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/reference/receptiviti.html","id":null,"dir":"Reference","previous_headings":"","what":"Receptiviti API — receptiviti","title":"Receptiviti API — receptiviti","text":"main function access Receptiviti API.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/reference/receptiviti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Receptiviti API — receptiviti","text":"","code":"receptiviti(text, output = NULL, id = NULL, text_column = NULL,   id_column = NULL, file_type = \"txt\", return_text = FALSE,   frameworks = getOption(\"receptiviti_frameworks\", \"all\"),   framework_prefix = TRUE, as_list = FALSE, bundle_size = 1000,   collapse_lines = FALSE, retry_limit = 10, clear_cache = FALSE,   clear_scratch_cache = TRUE, request_cache = TRUE, cores = detectCores()   - 1, use_future = FALSE, in_memory = TRUE, verbose = FALSE,   overwrite = FALSE, compress = FALSE, make_request = TRUE,   text_as_paths = FALSE, cache = Sys.getenv(\"RECEPTIVITI_CACHE\"),   cache_overwrite = FALSE,   cache_format = Sys.getenv(\"RECEPTIVITI_CACHE_FORMAT\", \"parquet\"),   key = Sys.getenv(\"RECEPTIVITI_KEY\"),   secret = Sys.getenv(\"RECEPTIVITI_SECRET\"),   url = Sys.getenv(\"RECEPTIVITI_URL\"))  receptiviti_status(url = Sys.getenv(\"RECEPTIVITI_URL\"),   key = Sys.getenv(\"RECEPTIVITI_KEY\"),   secret = Sys.getenv(\"RECEPTIVITI_SECRET\"), verbose = TRUE,   include_headers = FALSE)"},{"path":"https://receptiviti.github.io/receptiviti-r/reference/receptiviti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Receptiviti API — receptiviti","text":"text character vector text processed, path directory containing files, vector file paths. single path directory, file collapsed single text. path file files, line row treated separate text, unless collapse_lines TRUE. output Path .csv file write results . already exists, set overwrite TRUE overwrite . id Vector unique IDs length text, included results. text_column, id_column Column name text/id, text matrix-like object, path csv file. file_type File extension search , text path directory containing files read . return_text Logical; TRUE, text included first column result. frameworks vector frameworks include results . Texts always scored available framework -- just specifies return. Defaults , return scored frameworks. Can set receptiviti_frameworks option (e.g., options(receptiviti_frameworks = c(\"liwc\", \"sallee\"))). framework_prefix Logical; FALSE, remove framework prefix column names, may result duplicates. specified, 1 framework selected, as_list TRUE, default remove prefixes. as_list Logical; TRUE, returns list frameworks separate entries. bundle_size Number texts include request; 1 1,000. collapse_lines Logical; TRUE, text contains paths files, file treated single text. retry_limit Maximum number times request can retried hitting rate limit. clear_cache Logical; TRUE, clear existing files cache. Use cache_overwrite want fresh results without clearing disabling cache. Use cache = FALSE disable cache. clear_scratch_cache Logical; FALSE, preserve bundles written in_memory TRUE, request made. request_cache Logical; FALSE, always make fresh request, rather using response previous identical request. cores Number CPU cores split bundles across, multiple bundles. See Parallelization section. use_future Logical; TRUE, uses future back-end process bundles, case, parallelization can controlled plan function (e.g., plan(\"multisession\") use multiple cores); required see progress bars using multiple cores. See Parallelization section. in_memory Logical; FALSE, write bundles temporary files, load requested. verbose Logical; TRUE, show status messages. overwrite Logical; TRUE, overwrite existing output file. compress Logical; TRUE, save xz-compressed file. make_request Logical; FALSE, request made. useful want sure load one caches, sure results exist ; error encounters texts source . text_as_paths Logical; TRUE, ensures text treated vector file paths. Otherwise, determined NAs text every entry 500 characters long. cache Path directory save unique results reuse; defaults Sys.getenv(\"RECEPTIVITI_CACHE\"). See Cache section details. cache_overwrite Logical; TRUE, write results cache without reading . used want fresh results cached without clearing cache. cache_format Format cache database; see FileFormat. Defaults Sys.getenv(\"RECEPTIVITI_CACHE_FORMAT\"). key API Key; defaults Sys.getenv(\"RECEPTIVITI_KEY\"). secret API Secret; defaults Sys.getenv(\"RECEPTIVITI_SECRET\"). url API endpoint; defaults Sys.getenv(\"RECEPTIVITI_URL\"), defaults \"https://api.receptiviti.com/\". include_headers Logical; TRUE, receptiviti_status's verbose message include HTTP headers.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/reference/receptiviti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Receptiviti API — receptiviti","text":"data.frame columns text (return_text TRUE; originally entered text), id (one provided), text_hash (MD5 hash text), scores included framework (e.g., summary.word_count liwc.). as_list TRUE, returns list named entry containing data.frame framework.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/reference/receptiviti.html","id":"cache","dir":"Reference","previous_headings":"","what":"Cache","title":"Receptiviti API — receptiviti","text":"default, results unique texts saved Arrow database cache location (Sys.getenv(\"RECEPTIVITI_CACHE\")), retrieved subsequent requests. ensures exact texts re-sent API. , however, add processing time disc space usage. cache_format arguments (RECEPTIVITI_CACHE_FORMAT environment variable) can used adjust format cache. can use cache independently open_database(Sys.getenv(\"RECEPTIVITI_CACHE\")). can set cache argument FALSE prevent cache used, might make sense expect need reprocess . can also set clear_cache argument TRUE clear cache used , may useful cache gotten big, know new results returned. Even cached result exists, reprocessed variables new results, depends least 1 uncached result. , instance, add framework account want reprocess previously processed set texts, need first clear cache. Either way, duplicated texts within call sent . request_cache argument controls temporary cache bundle request. cleared R session ends. might want set FALSE new framework becomes available account want process set text already processed current R session without restarting. Another temporary cache made in_memory FALSE, default processing parallel (cores 1 use_future TRUE). contains file unique bundle, read needed parallel workers.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/reference/receptiviti.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Receptiviti API — receptiviti","text":"texts split bundles based bundle_size argument. bundle represents single request API, limited 1000 texts total size 10 MB. one bundle either cores greater 1 use_future TRUE (externally specified plan), bundles processed multiple cores. Using future also allows progress bars specified externally handlers; see examples.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/reference/receptiviti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Receptiviti API — receptiviti","text":"","code":"if (FALSE) {  # check that the API is available, and your credentials work receptiviti_status()  # score a single text single <- receptiviti(\"a text to score\")  # score multiple texts, and write results to a file multi <- receptiviti(c(\"first text to score\", \"second text\"), \"filename.csv\")  # score many texts in separate files ## defaults to look for .txt files file_results <- receptiviti(\"./path/to/txt_folder\")  ## could be .csv file_results <- receptiviti(   \"./path/to/csv_folder\",   text_column = \"text\", file_type = \"csv\" )  # score many texts from a file, with a progress bar ## set up cores and progress bar (only necessary if you want the progress bar) future::plan(\"multisession\") progressr::handlers(global = TRUE) progressr::handlers(\"progress\")  ## make request results <- receptiviti(   \"./path/to/largefile.csv\",   text_column = \"text\", use_future = TRUE ) }"}]
